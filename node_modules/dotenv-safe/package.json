{
  "_args": [
    [
      {
        "raw": "dotenv-safe",
        "scope": null,
        "escapedName": "dotenv-safe",
        "name": "dotenv-safe",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\sysweb\\nodemysql"
    ]
  ],
  "_from": "dotenv-safe",
  "_hasShrinkwrap": false,
  "_id": "dotenv-safe@6.1.0",
  "_location": "/dotenv-safe",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/dotenv-safe_6.1.0_1539107711412_0.7870558857675944"
  },
  "_npmUser": {
    "name": "rolodato",
    "email": "rolodato@rolodato.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "dotenv-safe",
    "scope": null,
    "escapedName": "dotenv-safe",
    "name": "dotenv-safe",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/dotenv-safe/-/dotenv-safe-6.1.0.tgz",
  "_shasum": "df6e72ced7d5bcfd9d870c9f656962a02197337b",
  "_shrinkwrap": null,
  "_spec": "dotenv-safe",
  "_where": "D:\\sysweb\\nodemysql",
  "author": {
    "name": "Rodrigo LÃ³pez Dato",
    "email": "rolodato@rolodato.com"
  },
  "bugs": {
    "url": "https://github.com/rolodato/dotenv-safe/issues"
  },
  "dependencies": {
    "dotenv": "^6.1.0"
  },
  "description": "Load environment variables from .env and ensure they are defined",
  "devDependencies": {
    "chai": "^3.5.0",
    "eslint": "^5.6.1",
    "fs-extra": "^1.0.0",
    "lodash.clonedeep": "^4.5.0",
    "mocha": "^5.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-O02OUTS+XmoRNZR4kRjJ9jlUGvQoXpMeTVVEBc8hUtgvPTgVZpsZH7TOocq4RVDpPrs2xGPwj6gIWjqRX+ErHA==",
    "shasum": "df6e72ced7d5bcfd9d870c9f656962a02197337b",
    "tarball": "https://registry.npmjs.org/dotenv-safe/-/dotenv-safe-6.1.0.tgz",
    "fileCount": 7,
    "unpackedSize": 11777,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbvOuACRA9TVsSAnZWagAA/g0P/2izI6XRcBHP4B0mV0we\nO1M54rq6upF7qJQwbd+ApARCov4w795du9UcZ7d5iR7p12P4+cK272OUHveP\nCTP+6QTu1sVxnvNCfHZVYMgVUmvdyGfUU3dmAVJlMUoTKuSbiGe62nwzhkW/\nlElACaVanZOGXza3aeo2avU0xplhez3xI3oYKo6RXaQ3e+OcmOUg+skgYwVl\n6q1+T7qid0n5VoYBHuJ0mIhrwR6exiKVw1CeHraIho6EqXPObnYI8rrJieWJ\ndoDr7iC4OdBOf4g/gJlFa86Td/vwdAygfKlcNktDAn10sUtUZnPNe4GzkayR\naUE9wFrNTE02uqS0PnSDIiAoGsAbKWu5qFKeCKjaEI70Z7eXCbUlEHJe0MH8\nxQyp7k4qKyp6pprCQnE16MfE7h2uJmr/pDNQN1YU0O7ayXC/YGQFe0B0l1GT\nIYoewObBS2SNRGet6iVIn+niq8BlyxbunV++3JZL7pqmoDyYIyThRaauD6Vf\nWps/DYetyAaaDb1zA/hhEG1WzIqeAgLGcveNmtrUQ/j9qwnfNj6ytdYZ/z6y\nahsA803OZ3W9kJjiaBC1Sn9yKm/AnAwQERGZ9d62C0kb1abEeXWUfphVEbv4\nDGJ1zIKSKFwddLqeYppSQErXdGTrcveLl+hFux6mYGU68Ez23y+/It53zWm7\nzOL9\r\n=mEa7\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js",
    "config.js",
    "MissingEnvVarsError.js"
  ],
  "gitHead": "ffe2b3393ab59db2371d4f8e682f525bd46d50fc",
  "homepage": "https://github.com/rolodato/dotenv-safe#readme",
  "keywords": [
    "dotenv"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "rolodato",
      "email": "rlopezdato@gmail.com"
    }
  ],
  "name": "dotenv-safe",
  "optionalDependencies": {},
  "readme": "# dotenv-safe\n\nIdentical to [`dotenv`](https://github.com/motdotla/dotenv), but ensures that all necessary environment variables are defined after reading from `.env`.\nThese needed variables are read from `.env.example`, which should be commited along with your project.\n\n[![Build Status](https://travis-ci.org/rolodato/dotenv-safe.svg)](https://travis-ci.org/rolodato/dotenv-safe)\n\n# Installation\n\n```\nnpm install --save dotenv-safe\n```\n\n```\nyarn add dotenv-safe\n```\n\n# Example\n\n```dosini\n# .env.example, committed to repo\nSECRET=\nTOKEN=\nKEY=\n```\n\n```dosini\n# .env, private\nSECRET=topsecret\nTOKEN=\n```\n\n```js\n// index.js\nrequire('dotenv-safe').config();\n```\n\nSince the provided `.env` file does not contain all the variables defined in\n`.env.example`, an exception is thrown:\n\n```\nMissingEnvVarsError: The following variables were defined in .env.example but are not present in the environment:\n  TOKEN, KEY\nMake sure to add them to .env or directly to the environment.\n\nIf you expect any of these variables to be empty, you can use the allowEmptyValues option:\nrequire('dotenv-safe').config({\n  allowEmptyValues: true\n});\n```\n\nNot all the variables have to be defined in `.env`, they can be supplied externally.\nFor example, the following would work:\n\n```\n$ TOKEN=abc KEY=xyz node index.js\n```\n\n# Usage\n\nRequiring and loading is identical:\n\n```js\nrequire('dotenv-safe').config();\n```\n\nThis will load environment variables from `.env` as usual, but will also read any variables defined in `.env.example`.\nIf any variables are already defined in the environment before reading from `.env`, they will not be overwritten.\nIf any variables are missing from the environment, a [`MissingEnvVarsError`](MissingEnvVarsError.js) will be thrown, which lists the missing variables.\nOtherwise, returns an object with the following format:\n\n```js\n{\n  parsed: { SECRET: 'topsecret', TOKEN: '' },          // parsed representation of .env\n  required: { SECRET: 'topsecret', TOKEN: 'external' } // key/value pairs required by .env.example\n                                                       // and defined by environment\n}\n```\n\nIf all the required variables were successfully read but an error was thrown when trying to read the `.env` file, the error will be included in the result object under the `error` key.\n\n`dotenv-safe` compares the actual environment after loading `.env` (if any) with the example file, so it will work correctly if environment variables are missing in `.env` but provided through other means such as a shell script.\n\n## Continuous integration (CI)\n\nIt can be useful to depend on a different set of example variables when running in a CI environment.\nThis can be done by checking if the `CI` environment variable is defined, which is supported by virtually all CI solutions.\nFor example:\n\n```js\nrequire('dotenv-safe').config({\n  example: process.env.CI ? '.env.ci.example' : '.env.example'\n});\n```\n\n# Options\n\n[Same options and methods supported by `dotenv`](https://github.com/motdotla/dotenv#options).\n\n```js\nrequire('dotenv-safe').config({\n    allowEmptyValues: true,\n    example: './.my-env-example-filename'\n});\n```\n\n## `allowEmptyValues`\n\nIf a variable is defined in the example file and has an empty value in the environment, enabling this option will not throw an error after loading.\nDefaults to `false`.\n\n## `example`\n\nPath to example environment file.\nDefaults to `.env.example`.\n\n# Motivation\n\nI regularly use apps that depend on `.env` files but don't validate if all the necessary variables have been defined correctly.\nInstead of having to document and validate this manually, I prefer to commit a self-documenting `.env` file (no values, key names only) which can be used as a reference.\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git://github.com/rolodato/dotenv-safe.git"
  },
  "scripts": {
    "pretest": "./node_modules/eslint/bin/eslint.js index.js config.js MissingEnvVarsError.js test/.",
    "test": "HELLO=fromTheOtherSide mocha"
  },
  "version": "6.1.0"
}
