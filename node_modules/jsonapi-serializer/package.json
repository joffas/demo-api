{
  "_args": [
    [
      {
        "raw": "jsonapi-serializer",
        "scope": null,
        "escapedName": "jsonapi-serializer",
        "name": "jsonapi-serializer",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\sysweb\\nodemysql"
    ]
  ],
  "_from": "jsonapi-serializer",
  "_hasShrinkwrap": false,
  "_id": "jsonapi-serializer@3.6.4",
  "_location": "/jsonapi-serializer",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jsonapi-serializer_3.6.4_1542737155280_0.4021561510746172"
  },
  "_npmUser": {
    "name": "seyz",
    "email": "sandro@munda.me"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsonapi-serializer",
    "scope": null,
    "escapedName": "jsonapi-serializer",
    "name": "jsonapi-serializer",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/jsonapi-serializer/-/jsonapi-serializer-3.6.4.tgz",
  "_shasum": "70b61c2eb6e9366e1b49cf18a01fd4a04473791e",
  "_shrinkwrap": null,
  "_spec": "jsonapi-serializer",
  "_where": "D:\\sysweb\\nodemysql",
  "author": {
    "name": "Sandro Munda",
    "email": "sandro@munda.me"
  },
  "bugs": {
    "url": "https://github.com/SeyZ/jsonapi-serializer/issues"
  },
  "dependencies": {
    "inflected": "^1.1.6",
    "lodash": "^4.16.3"
  },
  "description": "A Node.js framework agnostic library for serializing your data to JSON API",
  "devDependencies": {
    "chai": "^2.3.0",
    "grunt": "^1.0.3",
    "grunt-browserify": "^5.3.0",
    "mocha": "^5.2.0",
    "mongoose": "^4.3.4"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-n0FVi4Cs7Gzk6dH9kn+8to7yGYhVpdsFRtMHi3SaC80EWap2wjCcXPioSlq0hnqzdEFXtay0hRR4yRqXkLTJSA==",
    "shasum": "70b61c2eb6e9366e1b49cf18a01fd4a04473791e",
    "tarball": "https://registry.npmjs.org/jsonapi-serializer/-/jsonapi-serializer-3.6.4.tgz",
    "fileCount": 31,
    "unpackedSize": 357842,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb9E0ECRA9TVsSAnZWagAAmAwP/3JkyU6YOWKkF+nKxpgh\n3kPhFKIkSfePRvb5idpWLX855MoZzJMmVrh36oHa8+QnrB7B87r2+LVVYets\nE0e2I1bKdyHdFlXrV5IcC3YzDjgwk1sm6qQnZsNBtKe3gGFAk4jFQLOQ1x7J\niTeSWd4Nlqmof5p/KcKsdMDVJL2X1jFb2seE4xQZRX69YkZIyxg97/7JTW/O\nt9X0m/zcJ5OEhDSgUlD1C9w/UpkzPKpqzvFRv7/Xk5ib83k4K5Bc2w6fJOj2\nGQnL+8U3hzqVJbo8jPhL7yjSgwXV2pqRp19NjXO7lSRge5kzQgF/+J7YVhSo\nXYTmvSzyV1gAHMZul8eBbTPfpdaP0w7roxGy7VZSnrOLfpv2bTdYfrbMjKRW\nyJtp0EPAKHm+UGqy3+VZEvTAx8v6tDjFabAxAyLcu3w7KwxFpwRIoVaZ3N8d\n0Mav52jjPG8Mu1rnaHrXbCdguwWLnS9dl2ujmZ7maoEqp0NhmtMJRybPFwAC\nMh2bqmst2bwboyICZJbXVSFZyNaOujqyRY276TzXFSEbqUsYbjwy6R5kcLtf\nTob2oUjSUJ0r5LMkhrwiDJsFyJxa8y3vy2pmZwD9cUuFR1z0yAM89oT5RaVM\nv963ITul5HUiTb/7BelDzISVAi4+Fv/EQ/nIH4Nf+PUcCkGlPewM49Y7I48m\nJj8h\r\n=6ZDn\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "4e7001663493e124040de228349e1ac4e6ba0890",
  "homepage": "https://github.com/SeyZ/jsonapi-serializer#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "seyz",
      "email": "sandro@munda.me"
    }
  ],
  "name": "jsonapi-serializer",
  "optionalDependencies": {},
  "readme": "# JSON API Serializer\n\n<p align=\"center\">\n  <img src=\"https://github.com/SeyZ/jsonapi-serializer/blob/master/logo.jpg?raw=true\" alt=\"JSONAPI Serializer Logo\">\n</p>\n\n[![Build Status](https://travis-ci.org/SeyZ/jsonapi-serializer.svg?branch=master)](https://travis-ci.org/SeyZ/jsonapi-serializer)\n[![npm version](https://img.shields.io/npm/v/jsonapi-serializer.svg)](https://yarnpkg.com/en/package/jsonapi-serializer)\n[![download](https://img.shields.io/npm/dm/jsonapi-serializer.svg)](https://yarnpkg.com/en/package/jsonapi-serializer)\n\nA Node.js framework agnostic library for (de)serializing your data to [JSON\nAPI](http://jsonapi.org) (1.0 compliant).\n\n- [Migrate from 2.0 to 3.0](https://github.com/SeyZ/jsonapi-serializer/wiki/Migrate-from-2.0-to-3.0)\n- [Migrate from 1.x to 2.0](https://github.com/SeyZ/jsonapi-serializer/wiki/Migrate-from-1.x-to-2.0)\n\n## Installation\n`$ npm install jsonapi-serializer`\n\n## Documentation\n\n### Serialization\n\n    var JSONAPISerializer = require('jsonapi-serializer').Serializer;\n    new JSONAPISerializer(type, opts).serialize(data);\n\nThe function `JSONAPISerializer` takes two arguments:\n\n- `type`: The resource type.\n- `opts`: The serialization options.\n\nCalling the `serialize` method on the returned object will serialize your `data` (object or array) to a compliant JSONAPI document.\n\n\n#### Available serialization option (`opts` argument)\n\n- **attributes**: An array of attributes to show. You can define an attribute as an option if you want to define some relationships (included or not).\n    - **ref**: If present, it's considered as a relationships.\n    - **included**: Consider the relationships as [compound document](http://jsonapi.org/format/#document-compound-documents). Default: true.\n    - **id**: Configurable identifier field for the resource. Default: `id`.\n    - **attributes**: An array of attributes to show.\n    - **topLevelLinks**: An object that describes the top-level links. Values can be *string* or a *function*\n    - **dataLinks**: An object that describes the links inside data. Values can be *string* or a *function* (see examples below)\n    - **dataMeta**: An object that describes the meta inside data. Values can be a plain value or a *function* (see examples below)\n    - **relationshipLinks**: An object that describes the links inside relationships. Values can be *string* or a *function*\n    - **relationshipMeta**: An object that describes the meta inside relationships. Values can be a plain value or a *function*\n    - **ignoreRelationshipData**: Do not include the `data` key inside the relationship. Default: false.\n    - **keyForAttribute**: A function or string to customize attributes. Functions are passed the attribute as a single argument and expect a string to be returned. Strings are aliases for inbuilt functions for common case conversions. Options include: `dash-case` (default), `lisp-case`, `spinal-case`, `kebab-case`, `underscore_case`, `snake_case`, `camelCase`, `CamelCase`.\n    - **nullIfMissing**: Set the attribute to null if missing from your data input. Default: false.\n    - **pluralizeType**: A boolean to indicate if the type must be pluralized or not. Default: true.\n    - **typeForAttribute**: A function that maps the attribute (passed as an argument) to the type you want to override. If it returns `undefined`, ignores the flag for that attribute. Option *pluralizeType* ignored if set.\n    - **meta**: An object to include non-standard meta-information. Values can be a plain value or a *function*\n    - **transform**: A function to transform each record before the serialization.\n\n**Examples**\n\n- [Express example](https://github.com/SeyZ/jsonapi-serializer/tree/master/examples/express)\n- [Simple usage](#simple-usage-serializer)\n- [More examples in tests](https://github.com/SeyZ/jsonapi-serializer/blob/master/test/serializer.js)\n\n<a name=\"simple-usage-serializer\"></a>\nSimple usage:\n\n```javascript\nvar data = [\n  { id: 1, firstName: 'Sandro', lastName: 'Munda' },\n  { id: 2, firstName: 'John', lastName: 'Doe' }\n];\n```\n\n```javascript\nvar JSONAPISerializer = require('jsonapi-serializer').Serializer;\n\nvar UserSerializer = new JSONAPISerializer('users', {\n  attributes: ['firstName', 'lastName']\n});\n\nvar users = UserSerializer.serialize(data);\n\n// `users` here are JSON API compliant.\n```\n\nThe result will be something like:\n\n```javascript\n{\n  \"data\": [{\n    \"type\": \"users\",\n    \"id\": \"1\",\n    \"attributes\": {\n      \"first-name\": \"Sandro\",\n      \"last-name\": \"Munda\"\n    }\n  }, {\n    \"type\": \"users\",\n    \"id\": \"2\",\n    \"attributes\": {\n      \"first-name\": \"John\",\n      \"last-name\": \"Doe\"\n    }\n  }]\n}\n```\n\n### Deserialization\n\n    var JSONAPIDeserializer = require('jsonapi-serializer').Deserializer;\n    new JSONAPIDeserializer(opts).deserialize(data);\n\nThe function `JSONAPIDeserializer` takes one argument:\n\n- `opts`: The deserializer options.\n\nCalling the `deserialize` method on the returned object will deserialize your `data` (JSONAPI document) to a plain javascript object.\n\n#### Available deserialization option (`opts` argument)\n\n- **keyForAttribute**: A function or string to customize attributes. Functions are passed the attribute as a single argument and expect a string to be returned. Strings are aliases for inbuilt functions for common case conversions. Options include: `dash-case` (default), `lisp-case`, `spinal-case`, `kebab-case`, `underscore_case`, `snake_case`, `camelCase`, `CamelCase`.\n- **AN\\_ATTRIBUTE\\_TYPE**: this option name corresponds to the type of a relationship from your JSONAPI document.\n\t- **valueForRelationship**: A function that returns whatever you want for a relationship (see examples below) ***can return a Promise (see tests)***\n   - **transform**: A function to transform each record after the deserialization.\n\n**Examples**\n\n- [Simple usage](#simple-usage-deserializer)\n- [Relationship](#relationship-deserializer)\n- [More examples in tests](https://github.com/SeyZ/jsonapi-serializer/blob/master/test/deserializer.js)\n\n<a name=\"simple-usage-deserializer\"></a>\nSimple usage:\n\n```\n{\n  data: [{\n    type: 'users',\n    id: '1',\n    attributes: {\n      'first-name': Sandro,\n      'last-name': Munda\n    }\n  }, {\n    type: 'users',\n    id: '2',\n    attributes: {\n      'first-name': 'John',\n      'last-name': 'Doe'\n    }\n  }]\n}\n```\n\n```javascript\nvar JSONAPIDeserializer = require('jsonapi-serializer').Deserializer;\n\nnew JSONAPIDeserializer().deserialize(jsonapi, function (err, users) {\n  // `users` is...\n});\n```\n\n```javascript\n[\n  { id: 1, firstName: 'Sandro', lastName: 'Munda' },\n  { id: 2, firstName: 'John', lastName: 'Doe' }\n];\n```\n<a name=\"relationship-deserializer\"></a>\nRelationship:\n\n```\n{\n  data: [{\n    type: 'users',\n    id: '54735750e16638ba1eee59cb',\n    attributes: {\n      'first-name': 'Sandro',\n      'last-name': 'Munda'\n    },\n    relationships: {\n      address: {\n        data: { type: 'addresses', id: '54735722e16620ba1eee36af' }\n      }\n    }\n  }, {\n    type: 'users',\n    id: '5490143e69e49d0c8f9fc6bc',\n    attributes: {\n      'first-name': 'Lawrence',\n      'last-name': 'Bennett'\n    },\n    relationships: {\n      address: {\n        data: { type: 'addresses', id: '54735697e16624ba1eee36bf' }\n      }\n    }\n  }]\n}\n```\n\n```javascript\nvar JSONAPIDeserializer = require('jsonapi-serializer').Deserializer;\n\nnew JSONAPIDeserializer({\n  addresses: {\n    valueForRelationship: function (relationship) {\n      return {\n        id: relationship.id,\n        'address-line1': '406 Madison Court',\n        'zip-code': '49426',\n        country: 'USA'\n      };\n    }\n  }\n}).deserialize(jsonapi, function (err, users) {\n  // `users` is...\n});\n```\n\n```\n[{\n  id: '54735750e16638ba1eee59cb',\n  'first-name': 'Sandro',\n  'last-name': 'Munda',\n  address: {\n    id: '54735722e16620ba1eee36af',\n    'address-line1': '406 Madison Court',\n    'zip-code': '49426',\n    country: 'USA'\n  }\n}, {\n  id: '5490143e69e49d0c8f9fc6bc',\n  'first-name': 'Lawrence',\n  'last-name': 'Bennett',\n  address: {\n    id: '54735697e16624ba1eee36bf',\n    'address-line1': '406 Madison Court',\n    'zip-code': '49426',\n    country: 'USA'\n  }\n}]\n```\n\n#### Notes on Promises\nThe deserialization option `valueForRelationship` supports returning a `Promise` and so this library uses `Promises` under the hood. `bluebird` was previously used as a dependency, but due to bundle size concerns on both node and the web it was replaced with native promises.\n\n`bluebird` is definitely [more performant](http://bluebirdjs.com/docs/benchmarks.html) than native Promises. If performance is a major concern `Promise` can be globally polyfilled\n- node - via `global.Promise = require('bluebird')`\n- web - global `Promise` automatically gets assigned when using the [script tag](http://bluebirdjs.com/docs/getting-started.html) to load `bluebird`\n\n## Error serialization\n\n    var JSONAPIError = require('jsonapi-serializer').Error;\n    var error = new JSONAPIError(opts);\n\nThe function JSONAPIError takes one argument:\n\n- `opts`: The error options. All options are optional.\n\n#### Available error option (`opts` argument)\n\n- **id**: a unique identifier for this particular occurrence of the problem.\n- **status**: the HTTP status code applicable to this problem, expressed as a string value.\n- **code**: an application-specific error code, expressed as a string value.\n- **title**: a short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.\n- **detail**: a human-readable explanation specific to this occurrence of the problem. Like title, this field’s value can be localized.\n- **source**: an object containing references to the source of the error, optionally including any of the following members:\n  - **pointer**: a JSON Pointer [RFC6901] to the associated entity in the request document [e.g. \"/data\" for a primary data object, or \"/data/attributes/title\" for a specific attribute].\n  - **parameter**: a string indicating which URI query parameter caused the error.\n- **links**: a links object containing the following members:\n  - **about**: a link that leads to further details about this particular occurrence of the problem.\n- **meta**: a meta object containing non-standard meta-information about the error.\n\n**Examples**\n\n- [Simple usage](#simple-usage-error)\n- [More example](https://github.com/SeyZ/jsonapi-serializer/blob/master/test/error.js)\n\n<a name=\"simple-usage-error\"></a>\nSimple usage:\n\n```javascript\nvar JSONAPIError = require('jsonapi-serializer').Error;\n\nvar errors = new JSONAPIError({\n  code: '123',\n  source: { 'pointer': '/data/attributes/first-name' },\n  title: 'Value is too short',\n  detail: 'First name must contain at least three characters.'\n});\n\n// `errors` here are JSON API compliant.\n```\n\nThe result will be something like:\n\n```javascript\n{\n  \"errors\": [\n    {\n      \"code\":   \"123\",\n      \"source\": { \"pointer\": \"/data/attributes/first-name\" },\n      \"title\":  \"Value is too short\",\n      \"detail\": \"First name must contain at least three characters.\"\n    }\n  ]\n}\n```\n\n# License\n\n[MIT](https://github.com/SeyZ/jsonapi-serializer/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/SeyZ/jsonapi-serializer.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "version": "3.6.4"
}
