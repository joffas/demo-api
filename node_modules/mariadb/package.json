{
  "_args": [
    [
      {
        "raw": "mariadb",
        "scope": null,
        "escapedName": "mariadb",
        "name": "mariadb",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "D:\\sysweb\\nodemysql"
    ]
  ],
  "_from": "mariadb",
  "_hasShrinkwrap": false,
  "_id": "mariadb@2.0.5",
  "_location": "/mariadb",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mariadb_2.0.5_1557473605392_0.10812865957628692"
  },
  "_npmUser": {
    "name": "rusher",
    "email": "diego.dupin@mariadb.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mariadb",
    "scope": null,
    "escapedName": "mariadb",
    "name": "mariadb",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/mariadb/-/mariadb-2.0.5.tgz",
  "_shasum": "cc0de6c0564c3df8fc1a639c42321032c6c6174b",
  "_shrinkwrap": null,
  "_spec": "mariadb",
  "_where": "D:\\sysweb\\nodemysql",
  "author": {
    "name": "Diego Dupin",
    "email": "diego.dupin@mariadb.com"
  },
  "bugs": {
    "url": "https://jira.mariadb.org/projects/CONJS/"
  },
  "dependencies": {
    "denque": "^1.4.0",
    "iconv-lite": "^0.4.24",
    "long": "^4.0.0",
    "moment-timezone": "^0.5.25"
  },
  "description": "fast mariadb/mysql connector.",
  "devDependencies": {
    "@types/geojson": "^7946.0.7",
    "@types/node": "^11.11.5",
    "@typescript-eslint/eslint-plugin": "^1.5.0",
    "@typescript-eslint/parser": "^1.5.0",
    "benchmark": "^2.1.4",
    "chai": "^4.2.0",
    "codecov": "^3.2.0",
    "colors": "^1.3.2",
    "dom-parser": "^0.1.6",
    "error-stack-parser": "^2.0.1",
    "eslint": "^5.15.3",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-markdown": "^1.0.0-rc.0",
    "eslint-plugin-prettier": "^3.0.1",
    "mocha": "^6.0.2",
    "mocha-lcov-reporter": "^1.3.0",
    "nyc": "^13.3.0",
    "prettier": "^1.15.3",
    "typescript": "^3.3.4000"
  },
  "directories": {
    "lib": "lib",
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-zCf/2R3DgNRyUvdu8O48hZE+iVrHS8Q3aGrtyj6oV4st/byBltPBBM0AVFKiAEnnDqIGLkwfvxOSy11e7gbdGw==",
    "shasum": "cc0de6c0564c3df8fc1a639c42321032c6c6174b",
    "tarball": "https://registry.npmjs.org/mariadb/-/mariadb-2.0.5.tgz",
    "fileCount": 57,
    "unpackedSize": 442329,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc1SlGCRA9TVsSAnZWagAAkhgP/jljDq0Pc/UCQkyU8WpX\n44vp7zew5PJceZVd16iS2fHuEtvo0kujWLTa4u91AsoNKygntMdtzIYUm1LT\nI23PktLh+zEfn+uPShCymV8URq+Ym9xPoRIswY3bmxbWfpqMh3q8eJd5EHIe\nrCtcNo8q28xe3udBFWfszdVOV3yRv7iLlkJi0drUTQzRTcb182EfBAMlEvG5\ntHF7dQRRPyiujG0a4vcMGhieWtVy52PF5Ouj/Z+BIhLVW5Gb8WhRjtNvv57b\nuJoE0/eqXJ0H3VZ0ZcSrMpb1K6F/quN0424mAPw4waqTn2apBPb+J9InW9AQ\nYOActKJpjiLQb0A4uZ9z2gEeRvHTcJIgd+ryZBYTCW8jXb3IpIqu9AbgIatT\n4YVBSyVM8OChYFP/hRr7IK7iwFZdeyvbPuLdo5Bazmk8r7gd8bjD1SUdFhqO\n0KMAQzZfbkaITI2GUIpDvoSHm5+qnVZD8AzuKU0uMbhnzAh5zZgqXkpsW2oE\nds1gXpf8Vejn14aG++wRuFmQ5x//27pX2IVlk4rEnv1bWP/LrjJ5/PAuwqAN\nkoT0xQUlqIjZ7tBLzRrdjF9YeGqJZNFVkBkQ7EHvxOcf1sZB2rKk2MbRk7fM\nL+gaAlGS498KAB3dJkzbJnpg//84eBrdLuYLuxbOTRRKnTqEM9OMUFf1XOLo\nsrCV\r\n=5aKg\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">= 6.0"
  },
  "files": [
    "lib",
    "types/index.d.ts",
    "promise.js",
    "callback.js"
  ],
  "gitHead": "bc94afb36c073f361a40d5276166c95dbea3374a",
  "homepage": "https://github.com/MariaDB/mariadb-connector-nodejs#readme",
  "keywords": [
    "mariadb",
    "mysql",
    "client",
    "driver",
    "connector"
  ],
  "license": "LGPL-2.1+",
  "main": "promise.js",
  "maintainers": [
    {
      "name": "npm_mariadb",
      "email": "admin-npm@mariadb.com"
    },
    {
      "name": "rusher",
      "email": "diego.dupin@mariadb.com"
    }
  ],
  "name": "mariadb",
  "optionalDependencies": {},
  "private": false,
  "readme": "<p align=\"center\">\r\n  <a href=\"http://mariadb.com/\">\r\n    <img src=\"https://mariadb.com/kb/static/images/logo-2018-black.png\">\r\n  </a>\r\n</p>\r\n\r\n# MariaDB Node.js connector\r\n\r\n[![Linux Build](https://travis-ci.org/MariaDB/mariadb-connector-nodejs.svg?branch=master)](https://travis-ci.org/MariaDB/mariadb-connector-nodejs)\r\n[![Windows status](https://ci.appveyor.com/api/projects/status/bcg7yy4iy9viq08t/branch/master?svg=true)](https://ci.appveyor.com/project/rusher/mariadb-connector-nodejs)\r\n[![License (LGPL version 2.1)](https://img.shields.io/badge/license-GNU%20LGPL%20version%202.1-green.svg?style=flat-square)](http://opensource.org/licenses/LGPL-2.1)\r\n[![codecov](https://codecov.io/gh/MariaDB/mariadb-connector-nodejs/branch/master/graph/badge.svg)](https://codecov.io/gh/MariaDB/mariadb-connector-nodejs)\r\n\r\n**Non-blocking MariaDB and MySQL client for Node.js.**\r\n\r\nMariaDB and MySQL client, 100% JavaScript, with TypeScript definition, compatible with Node.js 6+, with the Promise API.\r\n\r\n## Why a New Client?\r\n\r\nWhile there are existing MySQL clients that work with MariaDB, (such as the [`mysql`](https://www.npmjs.com/package/mysql) and [`mysql2`](https://www.npmjs.com/package/mysql2) clients), the MariaDB Node.js Connector offers new functionality, like [Insert Streaming](#insert-streaming) and [Pipelining](#pipelining) while making no compromises on performance.\r\n\r\n### Insert Streaming \r\n\r\nUsing a Readable stream in your application, you can stream `INSERT` statements to MariaDB through the Connector.\r\n\r\n```javascript\r\n    \r\n    https.get('https://someContent', readableStream => {\r\n        //readableStream implement Readable, driver will stream data to database \r\n        connection.query(\"INSERT INTO myTable VALUE (?)\", [readableStream]);\r\n    });\r\n```\r\n \r\n### Pipelining\r\n\r\nWith Pipelining, the Connector sends commands without waiting for server results, preserving order.  For instance, consider the use of executing two `INSERT`  statements.\r\n\r\n<p align=\"center\">\r\n    <img src=\"./documentation/misc/pip.png\">\r\n</p>\r\n\r\nThe Connector doesn't wait for query results before sending the next `INSERT` statement. Instead, it sends queries one after the other, avoiding much of the network latency.\r\n\r\nFor more information, see the [Pipelining](/documentation/pipelining.md) documentation.\r\n \r\n### Bulk insert\r\n\r\nSome use cases require a large amount of data to be inserted into a database table. By using batch processing, these queries can be sent to the database in one call, thus improving performance.\r\n\r\nFor more information, see the [Batch](/documentation/batch.md) documentation.\r\n\r\n\r\n## Benchmarks\r\n\r\nMariaDB provides benchmarks comparing the Connector with popular Node.js MySQL clients, including: \r\n\r\n* [`promise-mysql`](https://www.npmjs.com/package/promise-mysql) version 3.3.1 + [`mysql`](https://www.npmjs.com/package/mysql) version 2.15.0 \r\n* [`mysql2`](https://www.npmjs.com/package/mysql2) version 1.5.3\r\n\r\n```\r\npromise-mysql  : 1,366 ops/sec ±1.42%\r\nmysql2         : 1,469 ops/sec ±1.63%\r\nmariadb        : 1,802 ops/sec ±1.19%\r\n```\r\n\r\n<img src=\"./documentation/misc/bench.png\" width=\"559\" height=\"209\"/>\r\n\r\nFor more information, see the [Benchmarks](/documentation/benchmarks.md) page.\r\n\r\n## Quick Start\r\n\r\nThe MariaDB Connector is available through the Node.js repositories.  You can install it using npm :\r\n\r\n```\r\n$ npm install mariadb\r\n```\r\n\r\nUsing ECMAScript < 2017:\r\n\r\n```js\r\nconst mariadb = require('mariadb');\r\nconst pool = mariadb.createPool({host: 'mydb.com', user: 'myUser', connectionLimit: 5});\r\npool.getConnection()\r\n    .then(conn => {\r\n    \r\n      conn.query(\"SELECT 1 as val\")\r\n        .then((rows) => {\r\n          console.log(rows); //[ {val: 1}, meta: ... ]\r\n          return conn.query(\"INSERT INTO myTable value (?, ?)\", [1, \"mariadb\"]);\r\n        })\r\n        .then((res) => {\r\n          console.log(res); // { affectedRows: 1, insertId: 1, warningStatus: 0 }\r\n          conn.end();\r\n        })\r\n        .catch(err => {\r\n          //handle error\r\n          conn.end();\r\n        })\r\n        \r\n    }).catch(err => {\r\n      //not connected\r\n    });\r\n```\r\n\r\nUsing ECMAScript 2017:\r\n\r\n```js\r\nconst mariadb = require('mariadb');\r\nconst pool = mariadb.createPool({host: 'mydb.com', user: 'myUser', connectionLimit: 5});\r\n\r\nasync function asyncFunction() {\r\n  let conn;\r\n  try {\r\n\tconn = await pool.getConnection();\r\n\tconst rows = await conn.query(\"SELECT 1 as val\");\r\n\tconsole.log(rows); //[ {val: 1}, meta: ... ]\r\n\tconst res = await conn.query(\"INSERT INTO myTable value (?, ?)\", [1, \"mariadb\"]);\r\n\tconsole.log(res); // { affectedRows: 1, insertId: 1, warningStatus: 0 }\r\n\r\n  } catch (err) {\r\n\tthrow err;\r\n  } finally {\r\n\tif (conn) return conn.end();\r\n  }\r\n}\r\n```\r\n\r\n## Documentation\r\n\r\nThe MariaDB Node.js Connector can use different APIs on the back-end: Promise and Callback.  \r\nThe default API is [Promise API](https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/documentation/promise-api.md).  \r\n\r\n[Callback API](https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/documentation/callback-api.md) is provided for compatibility with the `mysql` and `mysql2` APIs.\r\n  \r\n## Road Map \r\n\r\nThe Connector remains in development.  Here's a list of features being developed for future releases:\r\n\r\n* MariaDB `ed25519` plugin authentication\r\n* Query Timeouts\r\n\r\n\r\n## Contributing \r\n\r\nIf you would like to contribute to the MariaDB Node.js Connector, please follow the instructions given in the [Developers Guide.](/documentation/developers-guide.md)\r\n\r\nTo file an issue or follow the development, see [JIRA](https://jira.mariadb.org/projects/CONJS/issues/).\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/MariaDB/mariadb-connector-nodejs.git"
  },
  "scripts": {
    "benchmark": "node ./benchmarks/benchmarks.js",
    "coverage": "npm run coverage:test && npm run coverage:report",
    "coverage:report": "nyc report --reporter=text-lcov > coverage.lcov && codecov",
    "coverage:test": "nyc mocha \"test/**/*.js\"",
    "generate": "node ./tools/generate-mariadb.js",
    "test": "npm run test:types-prettier && npm run test:prettier && npm run test:types && npm run test:lint && npm run test:base",
    "test:base": "mocha \"test/**/*.js\" ",
    "test:lint": "eslint \"{lib,test}/**/*.js\" ",
    "test:prettier": "prettier --write \"{tools,lib,test,benchmarks}/**/*.js\"",
    "test:types": "eslint \"types/*.ts\" ",
    "test:types-prettier": "prettier --write \"types/*.ts\""
  },
  "types": "types/index.d.ts",
  "version": "2.0.5"
}
